# 后端鉴权服务地址
upstream auth_backend {
    server auth-backend:8080;
}

# 文件处理服务地址
upstream file_backend {
    server file-backend:8081;
}

# 演示服务地址
upstream demo_backend {
    server demo-service:8082;
}

server {
    listen 80;
    server_name localhost;

    # 健康检查端点
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # 鉴权检查端点（内部位置）
    location /auth-check {
        internal;
        proxy_pass http://auth_backend/auth;
        proxy_method POST;  # 强制使用POST方法
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 超时设置
        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;
    }

    # 文件上传处理位置
    location /upload {
        # 启用鉴权检查
        auth_request /auth-check;
        
        # 鉴权失败时的错误处理
        error_page 401 = @auth_error_401;
        error_page 403 = @auth_error_403;

        # 启用上传模块
        upload_pass /upload_handler;
        upload_store /var/nginx_uploads;
        upload_store_access user:rw group:rw all:rw;

        # 开启断点续传并设置状态存储目录
        upload_resumable on;
        upload_state_store /var/nginx_uploads/state_files;  # 需要确保该目录存在且有写权限
        
        # 上传文件大小限制
        client_max_body_size 100m;
        upload_max_file_size 100m;
        
        # 设置上传参数
        upload_set_form_field $upload_field_name.name "$upload_file_name";
        upload_set_form_field $upload_field_name.content_type "$upload_content_type";
        upload_set_form_field $upload_field_name.path "$upload_tmp_path";
        
        # 将其他表单字段传递给后端
        upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
        upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";
        
        # 清理临时文件
        upload_cleanup 400 404 499 500-505;
        
        # 日志记录
        access_log /var/log/nginx/upload.log main;
    }
    
    # 上传处理内部位置
    location /upload_handler {
        internal;  # 只允许内部跳转，不允许外部直接访问
        proxy_pass http://file_backend/upload;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-URI $request_uri;
    }

    # 静态文件服务
    location / {
        root /usr/share/nginx/html;
        index index.html;
    }

    # 演示服务代理
    location /demo/ {
        proxy_pass http://demo_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect / /demo/;
    }

    # 鉴权错误处理
    location @auth_error_401 {
        default_type application/json;
        return 401 '{"error": "Authentication required"}';
    }

    location @auth_error_403 {
        default_type application/json;
        return 403 '{"error": "Access forbidden"}';
    }

    # 静态文件服务示例
    location /files/ {
        alias /var/nginx_uploads/;
        autoindex off;
        
        # 保护文件访问也需要鉴权
        auth_request /auth-check;
        error_page 401 = @auth_error_401;
        error_page 403 = @auth_error_403;
    }
}